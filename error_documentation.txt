# Error Documentation for RSH AI Backend

## WebSocket Connection Issues (2025-05-27)

### 1. CORS Configuration Error
- Error: Origins not being accepted properly
- Location: websocket_handler.py and app.py
- Impact: Frontend cannot establish WebSocket connection
- Current Fix Attempts:
  - Added CORS headers
  - Set cors_allowed_origins to "*"
  - Added withCredentials support

### 2. Socket.IO Configuration Issues
- Error: Connection being refused on port 5001
- Location: Frontend websocket.ts and backend app.py
- Impact: Real-time updates not working
- Current Fix Attempts:
  - Updated Socket.IO initialization
  - Added proper CORS headers
  - Enabled debug logging

### 3. Data Format Mismatch
- Error: Analytics data not being displayed
- Location: analytics_pipeline.py and Analytics.tsx
- Impact: User analytics not showing in dashboard
- Current Fix Attempts:
  - Updated data structure to match frontend expectations
  - Added default values for missing fields

## User Analytics Display Issues (2025-05-28)

### 4. List Display Bug in Analytics Table
- Error: Health complaints and barriers displayed incorrectly as individual characters with bullet points
- Location: Analytics.tsx in chatbot-admin-dashboard and user_insights.json in backend
- Impact: Poor user experience when viewing user analytics data
- Root Cause: 
  - Corrupted data in user_insights.json where health complaints were stored as individual characters
  - Example: "diabetes" was stored as ["b", "s", "a", "i", "diabetes", "t", "e", "d"]
  - Frontend displaying each character as a separate item with bullet points
  - Data validation issues causing incorrect data types to be displayed

- Comprehensive Fix Applied:
  - Fixed corrupted data in user_insights.json by removing individual characters
  - Enhanced frontend data validation to filter out single-character entries:
    - Added length check to filter out items with length <= 1
    - Added regex pattern to filter out single letters
    - Implemented multiple layers of filtering for robustness
  - Improved visual design of health complaints and barriers:
    - Added background color (blue-50 for complaints, orange-50 for barriers)
    - Added padding and rounded corners for better visual separation

### 5. Thread Messages Display Issues in Users Tab (2025-05-28)
- Error: Thread messages not displaying or showing "No OpenAI Assistant thread messages found for this user"
- Location: Users.tsx and threadService.ts in chatbot-admin-dashboard, app.py in backend
- Impact: Unable to view user conversation threads in the Users tab
- Root Cause: 
  - System uses two types of threads for each user: regular and analytics (with "analytics_" prefix)
  - Frontend was only trying to fetch the regular thread, missing messages in the analytics thread
  - Message content structure from OpenAI API not being parsed correctly
  - CORS issues with withCredentials not being included in requests

- Comprehensive Fix Applied:
  - Updated backend API endpoint to check for both regular and analytics threads
  - Modified frontend service to fetch and combine messages from both thread types
  - Improved error handling and added better logging
  - Enhanced message content parsing to handle different content structures:
    - Added safe extraction of message content with proper error handling
    - Added fallback mechanisms for different content formats
    - Improved display of message timestamps and formatting
  - Added withCredentials back to API requests to fix CORS issues
    - Made text font-medium for better readability
    - Increased spacing between items
  - Added proper error handling with try/catch blocks
  - Enhanced logging for debugging purposes

## Required Fixes

1. Backend Configuration:
```python
# app.py
CORS(app, resources={
    r"/*": {
        "origins": "*",
        "methods": ["GET", "POST", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization"],
        "supports_credentials": True
    }
})

# websocket_handler.py
socketio.init_app(
    app,
    cors_allowed_origins=["*"],
    async_mode='threading',
    cors_credentials=True
)
```

2. Frontend Configuration:
```typescript
// websocket.ts
this.socket = io(this.url, {
    transports: ['polling', 'websocket'],
    path: '/socket.io',
    withCredentials: true,
    autoConnect: true
});
```

## Next Steps

1. Enable detailed logging in backend:
```python
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
```

2. Monitor WebSocket events:
```python
@socketio.on('connect')
def handle_connect():
    logger.debug('Client connected')

@socketio.on('disconnect')
def handle_disconnect():
    logger.debug('Client disconnected')
```

3. Add error handlers:
```python
@socketio.on_error()
def error_handler(e):
    logger.error(f'SocketIO error: {str(e)}')
```

## Testing Steps

1. Start backend server with debug logging
2. Monitor network tab in browser dev tools
3. Check server logs for connection attempts
4. Verify CORS headers in response
5. Test WebSocket connection manually using Socket.IO client
